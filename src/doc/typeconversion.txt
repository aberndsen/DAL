Several type conversions are required to marshall data from the LOFAR datasets
to C++ and Python:

1. disk <-> HDF5

The HDF5 library converts data from HDF5 files on disk to the appropriate
HDF5 types in memory. This happens in a completely transparent manner.

2. HDF5 <-> C++

The HDF5 data types are endianness and size aware, but need to be converted
to their native C++ counterparts. The file hdf5core/h5typemap.h contains
this conversion for basic types.

Vectors and arrays are converted in HDF5Attribute.h and HDF5DatasetBase.h
respectively.

3. C++ <-> casacore

The casacore arrays can be non-contiguous and require FORTRAN dimension
ordering. The file HDF5DatasetBase.h contains get/set routines to
interface casacore arrays with datasets.

4. C++ <-> Python

SWIG takes care of marshalling native types between C++ and Python. The
file DAL.i augments this process in order to translate non-standard
types like size_t and ssize_t. The same file also contains translations
for the names of templates, as Python cannot handle types containing
the angle brackets like Attribute<double>.

5. C++ <-> numpy

The numpy arrays are used to interface with datasets from python. SWIG,
with help from external/numpy.i, can translate parameter patterns like
(size_t dim1, size_t dim2, float *in_buffer2) to an interface for
numpy arrays. As numpy has its own types, explicit type conversions
need to be defined in DAL.i.

